<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title>View a fullscreen map</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.18.0/mapbox-gl.js'></script>

    <!-- geocoding -->
        <script src='https://unpkg.com/mapbox@1.0.0-beta10/dist/mapbox-sdk.min.js'></script> 

    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mapbox-gl/0.45.0/mapbox-gl.js"></script>

    <!-- Turf.js cdn turns objects into geojson -->
    <script src='https://npmcdn.com/@turf/turf/turf.min.js'></script>

    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.css' rel='stylesheet' />

    <!-- the jquery to save the day -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>
    <style>
        body { margin:0; padding:0; }
        #map { position:absolute; top:0; bottom:0; width:100%; }
    </style>
<!-- need a leaflet cdn for leaflet functions  -->
<script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js" integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==" crossorigin=""></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v0.42.0/mapbox-gl.css' rel='stylesheet' />
<!-- mapbox geocoder cdn js/css -->
<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.2.0/mapbox-gl-geocoder.min.js'></script>
<link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.2.0/mapbox-gl-geocoder.css' type='text/css' />
<!-- bootstrap -->
<script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>

</head>
<body>
<div id='map'></div>
<div id='instructions'></div>
<button id="hide" onclick='hideDIR()'></button>
<button id="Router" onclick="getRoute()">Calculate Route</button>
<div id="searchboxes">
<div id="origin">
    <!-- <input id="searchOrig" type="text" placeholder="Origin"> -->
</div> 
<div id="destination">
    <!-- <input id="searchDes" type="text" placeholder="Destination"> -->
</div>
<button id='zoomto' class='btn-control'>Zoom to Route</button>


</div>
<nav id="toggle"></nav>
<!-- layer slider -->
<div class='map-overlay top'>
    <div class='map-overlay-inner'>
        <label>Layer opacity: <span id='slider-value'>100%</span></label>
        <input id='slider' type='range' min='0' max='100' step='0' value='100' />
    </div>
</div>

<!--Welcome modal -->
<div class="modal-backdrop" id="myModal">
  <div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header" style="background:#f6b33d -moz-linear-gradient(center top , #f6b33d 5%, #d29105 100%) repeat scroll 0 0;">
          <a class="close" data-dismiss="modal">Ã—</a>
          <h3 style="color:#ffffff;">SafeRide</h3>
        </div>
        <div class="modal-body">
          <p>This site allows bikers to find a safe bicycle route using the DVRPC Bicycle Level of Traffic Stress and Connectivity Analysis</p>
    <p>Based on this network, we will assign you a bike route that not only prioritizes the <a href="">most efficient path</a> but also considers the least stressful riding experience on the existing network.
        <h4><a href="">(How do we do this?)</a></h4></p>
        </div>
      </div>
    </div>
</div>
<script>
var originCoord = [];
var destinationCoord =[];

//default modal
$(window).load(function(){
   setTimeout(function(){
       $('#myModal').modal('show');
   }, 0);
});


    var hideDIR = function hider(){
        console.log("hi");
        $( "#instructions" ).toggle();
        
    };
mapboxgl.accessToken =  '<%=ENV['mapbox'] %>';

//limit geocoding regionally

//add geocoding functions here
var client = new MapboxClient(mapboxgl.accessToken);

//forward geocoding
var geocode = client.geocodeForward('Philadelphia, PA', function(err, data, res) {
  // data is the geocoding result as parsed JSON
  console.log("data:",data);
  console.log("res:",res);
  // res is the http response, including: status, headers and entity properties
});
geocode;
console.log('geocode;',geocode);

var map = new mapboxgl.Map({
    container: 'map', // container id
    style: 'mapbox://styles/mapbox/dark-v9', //stylesheet location
    center: [-75.29465, 40.1379937], // starting position
    zoom: 13 // starting zoom
});




//limit geocode results
var origingeocode = new MapboxGeocoder({
    accessToken: mapboxgl.accessToken,

    // limit results to US
    country: 'us',

    // further limit results to the geographic bounds representing the region of
    // DVRPC LTS & Connectivity Analysis
    bbox: [-75.2946589071447, 39.8557310196928, -74.9557749984862, 40.1379937851305],

    // apply a client side filter to further limit results to those strictly within
    // the Pennsylvania and New Jersey region
    filter: function (item) {
        console.log("item:",item);
        return item.context.map(function (i) {
            console.log("item.context.map:",item.context.map);
            console.log("item.context",item.context);
            // id is in the form {index}.{id} per https://github.com/mapbox/carmen/blob/master/carmen-geojson.md
            // find the `region`'s named PA + NJ
            return (i.id.split('.').shift() === 'region' && (i.text === 'Pennsylvania' || 'New Jersey'));
        }).reduce(function (acc, cur) {
            return acc || cur;
        });
    }//adding points once geocode results are given
});

map.addControl(origingeocode);
// function addPoint(item){
map.on('load', function() {
// console.log(item,"item")
map.addSource('single-point', {
        "type": "geojson",
        "data": {
            "type": "FeatureCollection",
            "features": []
        }
    });

    map.addLayer({
        "id": "point",
        "source": "single-point",
        "type": "circle",
        "paint": {
            "circle-radius": 10,
            "circle-color": "#007cbf"
        }});
// };
  // addPoint();

// console.log(originG,"originG");
console.log("anything happenign origingeocode?");

// originG;
}); // end of add point
//let originCoord = [];
origingeocode.on('result', function(ev) {
        map.getSource('single-point').setData(ev.result.geometry);
        console.log(ev.result.geometry,"ev.result.geometry")
         originCoord = ev.result.geometry.coordinates;
        console.log(originCoord);

    });
console.log("origncoordOutsideofFunction",originCoord)
// destinatin geocode bias
//limit geocode results
var destinationgeocode = new MapboxGeocoder({
    accessToken: mapboxgl.accessToken,

    // limit results to US
    country: 'us',

    // further limit results to the geographic bounds representing the region of
    // DVRPC LTS & Connectivity Analysis
    bbox: [-75.2946589071447, 39.8557310196928, -74.9557749984862, 40.1379937851305],

    // apply a client side filter to further limit results to those strictly within
    // the Pennsylvania and New Jersey region
    filter: function (item) {
        console.log("item:",item);
        return item.context.map(function (i) {
            console.log("item.context.map:",item.context.map);
            console.log("item.context",item.context);
            // id is in the form {index}.{id} per https://github.com/mapbox/carmen/blob/master/carmen-geojson.md
            // find the `region`'s named PA + NJ
            return (i.id.split('.').shift() === 'region' && (i.text === 'Pennsylvania' || 'New Jersey'));
        }).reduce(function (acc, cur) {
            return acc || cur;
        });
    }//adding points once geocode results are given
});

map.addControl(destinationgeocode);

// function addPoint(item){
map.on('load', function() {
// console.log(item,"item")
map.addSource('point', {
        "type": "geojson",
        "data": {
            "type": "FeatureCollection",
            "features": []
        }
    });

    map.addLayer({
        "id": "pint",
        "source": "point",
        "type": "circle",
        "paint": {
            "circle-radius": 10,
            "circle-color": "#007cbf"
        }});
// };
  // addPoint();

// console.log(originG,"originG");
console.log("anything happenign destinationgeocode?");

// originG;
}); // end of add point
//let destinationCoord =[];
destinationgeocode.on('result', function(ev) {
        map.getSource('point').setData(ev.result.geometry);
        console.log(ev.result.geometry,"ev.result.geometry")
          destinationCoord = ev.result.geometry.coordinates;
        console.log(destinationCoord);
    });
console.log("destinationgeocode",destinationgeocode);

console.log("destinationCoord:",destinationCoord);
map.addControl(new mapboxgl.FullscreenControl());

//mapbox route api request here
//     map.on('load', function() {
//   getRoute();
// });

function getRoute() {
  
  var start = originCoord;//[-75.173223, 39.958345]//
  console.log(start);
  var end = destinationCoord;//[-75.157215, 39.954562];//destinationCoord;
  console.log(destinationCoord);
  var directionsRequest = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;
  $.ajax({
    method: 'GET',
    url: directionsRequest,
  }).done(function(data) {
    var route = data.routes[0].geometry;
    // if (id:'route')
    map.addLayer({
      id: 'route',
      type: 'line',
      source: {
        type: 'geojson',
        data: {
          type: 'Feature',
          geometry: route
        }
      },
      paint: {
        'line-width': 6,
        'line-color': '#FF5722'
      }
    });
  
var instructions = document.getElementById('instructions');
console.log("instructions:",instructions);
console.log("data:",data)

var steps = data.routes[0].legs[0].steps;
console.log("steps:",steps)
steps.forEach(function(step) {
  instructions.insertAdjacentHTML('beforeend', '<p>' + step.maneuver.instruction + '</p>');
});
  //zoom to route
console.log(route);
document.getElementById('zoomto').addEventListener('click', function() {

        // Geographic coordinates of the LineString
        var routecoordinates = route.coordinates;
        console.log("routecoordinates",routecoordinates);
        var routebounds = routecoordinates.reduce(function(routebounds, coord) {
            return routebounds.extend(coord);
        }, new mapboxgl.LngLatBounds(routecoordinates[0], routecoordinates[0]));

        map.fitBounds(routebounds, {
            padding: 20
        // Pass the first coordinates in the LineString to `lngLatBounds` &
        // wrap each coordinate pair in `extend` to include them in the bounds
        // result. A variation of this technique could be applied to zooming
        // to the bounds of multiple Points or Polygon geomteries - it just
        // requires wrapping all the coordinates with the extend method.
        
    });
    });
});

  };// var route ends here

//}
map.on('load', function() {
// add geojson source to mapbox
var  geojson = 'https://opendata.arcgis.com/datasets/113771ce9fa0424a8b529de9b74b1bc4_0.geojson';
console.log("geojson",geojson); 

// add geojson layer to mapbox
var ltsgeoJSON = $.ajax({
    url: 'https://opendata.arcgis.com/datasets/113771ce9fa0424a8b529de9b74b1bc4_0.geojson'
    }).done(function(response){
        var bounds = turf.bbox(response);
        map.fitBounds(bounds, {padding: 2});
        console.log("response",response);
        console.log("response.features[0]",response.features[0]);

            // Add a new source from our GeoJSON data 
             map.addSource("myData1",{
                 type:"geojson",
                 data: response
             });
                    map.addLayer({
                "id": "LTS",
                "type": "line",
                "source": "myData1",
                "layout": {
                    "visibility": "visible",
                    "line-join": "round",
                    "line-cap": "round"
                },
                "paint": {
                    'line-color': {
                        property : 'COST',
                        stops: [
                        [0, '#1E88E5'],//blue
                        [0.2, '#9CCC65'],//green#64B5F6 lighter blue
                        [0.35,'#E53935'],//red
                        [1.5, '#EF9A9A'],//peach
                        [2, '#795548']//brown
                        ]
                     }
                    }
                
            });
            }); //lts done
            
//       var popup = new mapboxgl.Popup();
  
  });//ends onload function
//slider function

var slider = document.getElementById('slider');
var sliderValue = document.getElementById('slider-value');

slider.addEventListener('input', function(e) {
        // Adjust the layers opacity. layer here is arbitrary - this could
        // be another layer name found in your style or a custom layer
        // added on the fly using `addSource`.
        map.setPaintProperty('LTS', 'line-opacity', parseInt(e.target.value, 10) / 100);

        // Value indicator
        sliderValue.textContent = e.target.value + '%';
    });


//toggle bike layer
// var toggleableLayerIds = ['LTS']; // add more layers

// for (var i = 0; i < toggleableLayerIds.length; i++) {
//     var id = toggleableLayerIds[i];

//     var link = document.createElement('a');
//     link.href = '#';
//     link.className = 'active';
//     link.textContent = id;

//     link.onclick = function (e) {
//         var clickedLayer = this.textContent;
//         e.preventDefault();
//         console.log("preventdefault?",e.preventDefault());
//         e.stopPropagation();

//         var visibility = map.getLayoutProperty(clickedLayer, 'visibility');

//         if (visibility === 'visible') {
//             map.setLayoutProperty(clickedLayer, 'visibility', 'none');
//             this.className = '';
//         } else {
//             this.className = 'active';
//             map.setLayoutProperty(clickedLayer, 'visibility', 'visible');
//         }
//     };

//     var layers = document.getElementById('toggle');
//     layers.appendChild(link);
// };

// function costtoColor(response){
//                         for (i = 0; i < response.features.length; i++) {
//                         COST = response.features[i].properties.COST;
//                         COSTstr=`${COST}`;
//                         console.log(COSTstr,"1");
//                         COSTstr = COSTstr.slice(COSTstr.indexOf('.')+1);
//                         console.log(COSTstr,"2");
//                         done = false; 
//                         color = [];
//                         while (!done){
//                             console.log("3",COSTstr.length)
//                             // if (COSTstr.length >= 2){
//                             //     num = COSTstr.slice(0,2);
//                             //     console.log("4",num);
//                             //     num2 = COSTstr.slice(2);
//                             //     console.log("5",COSTstr);
//                             //     num3 = num2.slice(2);
//                             // } else {
//                                 num = Math.floor(Math.random() * 256);
//                                 console.log("6",num)
//                             //}
//                             color.push(num.toFixed(0));
//                             if (color.length == 3)
//                                 {done = true;}
//                         }
//                              return (`rgb(${color.join(',')})`);   
                            
//                         };
//                     };
                    //};

</script>

<!-- graphhopper -->



 <script src="https://cdn.jsdelivr.net/npm/graphhopper-js-api-client/dist/graphhopper-client.js"></script>
 




<!-- <div id="mapid"></div>
 --><!-- Add jQuery -->
<!--     <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script> -->
<!-- Leaflet Ajax CDN -->
<script type="text/javascript" src="
  https://cdnjs.cloudflare.com/ajax/libs/leaflet-ajax/2.1.0/leaflet.ajax.min.js"></script>


</body>
</html>